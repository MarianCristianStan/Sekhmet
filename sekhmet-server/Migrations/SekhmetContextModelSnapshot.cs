// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using sekhmet_server.Models;

#nullable disable

namespace sekhmet_server.Migrations
{
    [DbContext(typeof(SekhmetContext))]
    partial class SekhmetContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("sekhmet_server.Models.Comm", b =>
                {
                    b.Property<int>("Comm_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Comm_ID"));

                    b.Property<int?>("Comm_Replied_ToComm_ID")
                        .HasColumnType("int");

                    b.Property<int?>("Comm_Reply_To_ID")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created_At_Datetime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Created_By_User_ID")
                        .HasColumnType("int");

                    b.Property<int>("Post_ID")
                        .HasColumnType("int");

                    b.HasKey("Comm_ID");

                    b.HasIndex("Comm_Replied_ToComm_ID");

                    b.HasIndex("Created_By_User_ID");

                    b.HasIndex("Post_ID");

                    b.ToTable("Comms");
                });

            modelBuilder.Entity("sekhmet_server.Models.Conversation", b =>
                {
                    b.Property<int>("Conversation_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Conversation_ID"));

                    b.Property<string>("Conversation_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Conversation_Type")
                        .HasColumnType("int");

                    b.HasKey("Conversation_ID");

                    b.ToTable("Conversations");
                });

            modelBuilder.Entity("sekhmet_server.Models.Conversation_User", b =>
                {
                    b.Property<int>("Conversation_User_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Conversation_User_ID"));

                    b.Property<int>("Conversation_ID")
                        .HasColumnType("int");

                    b.Property<int>("User_ID")
                        .HasColumnType("int");

                    b.HasKey("Conversation_User_ID");

                    b.HasIndex("Conversation_ID");

                    b.HasIndex("User_ID");

                    b.ToTable("Conversation_Users");
                });

            modelBuilder.Entity("sekhmet_server.Models.Follow", b =>
                {
                    b.Property<int>("FollowingUserId")
                        .HasColumnType("int");

                    b.Property<int>("FollowedUserId")
                        .HasColumnType("int");

                    b.HasKey("FollowingUserId", "FollowedUserId");

                    b.HasIndex("FollowedUserId");

                    b.ToTable("Follows");
                });

            modelBuilder.Entity("sekhmet_server.Models.Like", b =>
                {
                    b.Property<int>("Like_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Like_ID"));

                    b.Property<int>("Post_ID")
                        .HasColumnType("int");

                    b.Property<int>("User_ID")
                        .HasColumnType("int");

                    b.HasKey("Like_ID");

                    b.HasIndex("Post_ID");

                    b.HasIndex("User_ID");

                    b.ToTable("Likes");
                });

            modelBuilder.Entity("sekhmet_server.Models.Message", b =>
                {
                    b.Property<int>("Message_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Message_ID"));

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Conversation_ID")
                        .HasColumnType("int");

                    b.Property<int>("User_ID_Receiver")
                        .HasColumnType("int");

                    b.Property<int>("User_ID_Sender")
                        .HasColumnType("int");

                    b.HasKey("Message_ID");

                    b.HasIndex("Conversation_ID");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("sekhmet_server.Models.Post", b =>
                {
                    b.Property<int>("Post_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Post_ID"));

                    b.Property<DateTime?>("Created_At_Datetime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("User_ID")
                        .HasColumnType("int");

                    b.HasKey("Post_ID");

                    b.HasIndex("User_ID");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("sekhmet_server.Models.Post_Media", b =>
                {
                    b.Property<int>("Post_Media_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Post_Media_ID"));

                    b.Property<byte[]>("Media_File")
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("Post_ID")
                        .HasColumnType("int");

                    b.HasKey("Post_Media_ID");

                    b.HasIndex("Post_ID");

                    b.ToTable("Post_Medias");
                });

            modelBuilder.Entity("sekhmet_server.Models.User", b =>
                {
                    b.Property<int>("User_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("User_ID"));

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("First_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Last_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password_Hash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Profile_Picture")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("User_ID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("sekhmet_server.Models.Comm", b =>
                {
                    b.HasOne("sekhmet_server.Models.Comm", "Comm_Replied_To")
                        .WithMany("Replies")
                        .HasForeignKey("Comm_Replied_ToComm_ID");

                    b.HasOne("sekhmet_server.Models.User", "User")
                        .WithMany("Comms")
                        .HasForeignKey("Created_By_User_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("sekhmet_server.Models.Post", "Post")
                        .WithMany("Comms")
                        .HasForeignKey("Post_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Comm_Replied_To");

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("sekhmet_server.Models.Conversation_User", b =>
                {
                    b.HasOne("sekhmet_server.Models.Conversation", "Conversation")
                        .WithMany("Conversation_Users")
                        .HasForeignKey("Conversation_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sekhmet_server.Models.User", "User")
                        .WithMany("Conversation_Users")
                        .HasForeignKey("User_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Conversation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("sekhmet_server.Models.Follow", b =>
                {
                    b.HasOne("sekhmet_server.Models.User", "FollowedUser")
                        .WithMany("Followers")
                        .HasForeignKey("FollowedUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("sekhmet_server.Models.User", "FollowingUser")
                        .WithMany("Followings")
                        .HasForeignKey("FollowingUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FollowedUser");

                    b.Navigation("FollowingUser");
                });

            modelBuilder.Entity("sekhmet_server.Models.Like", b =>
                {
                    b.HasOne("sekhmet_server.Models.Post", "Post")
                        .WithMany("Likes")
                        .HasForeignKey("Post_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("sekhmet_server.Models.User", "User")
                        .WithMany("Likes")
                        .HasForeignKey("User_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("sekhmet_server.Models.Message", b =>
                {
                    b.HasOne("sekhmet_server.Models.Conversation", "Conversation")
                        .WithMany("Messages")
                        .HasForeignKey("Conversation_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Conversation");
                });

            modelBuilder.Entity("sekhmet_server.Models.Post", b =>
                {
                    b.HasOne("sekhmet_server.Models.User", "User")
                        .WithMany("Posts")
                        .HasForeignKey("User_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("sekhmet_server.Models.Post_Media", b =>
                {
                    b.HasOne("sekhmet_server.Models.Post", "Post")
                        .WithMany("Post_Medias")
                        .HasForeignKey("Post_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");
                });

            modelBuilder.Entity("sekhmet_server.Models.Comm", b =>
                {
                    b.Navigation("Replies");
                });

            modelBuilder.Entity("sekhmet_server.Models.Conversation", b =>
                {
                    b.Navigation("Conversation_Users");

                    b.Navigation("Messages");
                });

            modelBuilder.Entity("sekhmet_server.Models.Post", b =>
                {
                    b.Navigation("Comms");

                    b.Navigation("Likes");

                    b.Navigation("Post_Medias");
                });

            modelBuilder.Entity("sekhmet_server.Models.User", b =>
                {
                    b.Navigation("Comms");

                    b.Navigation("Conversation_Users");

                    b.Navigation("Followers");

                    b.Navigation("Followings");

                    b.Navigation("Likes");

                    b.Navigation("Posts");
                });
#pragma warning restore 612, 618
        }
    }
}
